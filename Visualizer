
import tkinter as tk
from tkinter import messagebox

class PageReplacementVisualizer:
    def __init__(self, root):
        self.root = root
        self.root.title("Page Replacement Visualizer")

        # Input section
        tk.Label(root, text="Frame Count:").grid(row=0, column=0, padx=5, pady=5)
        self.frame_entry = tk.Entry(root)
        self.frame_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(root, text="Page Request String (comma separated):").grid(row=1, column=0, padx=5, pady=5)
        self.pages_entry = tk.Entry(root, width=50)
        self.pages_entry.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(root, text="Algorithm:").grid(row=2, column=0, padx=5, pady=5)
        self.algorithm_var = tk.StringVar(value="FIFO")
        tk.OptionMenu(root, self.algorithm_var, "FIFO", "LRU", "Optimal").grid(row=2, column=1, padx=5, pady=5)

        tk.Button(root, text="Run", command=self.run_algorithm).grid(row=3, column=0, columnspan=2, pady=10)

        # Output section
        self.output_text = tk.Text(root, height=20, width=70)
        self.output_text.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

    def run_algorithm(self):
        self.output_text.delete(1.0, tk.END)
        try:
            frames = int(self.frame_entry.get())
            pages = list(map(int, self.pages_entry.get().split(',')))
        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid numbers.")
            return

        algo = self.algorithm_var.get()
        if algo == "FIFO":
            self.fifo(frames, pages)
        elif algo == "LRU":
            self.lru(frames, pages)
        elif algo == "Optimal":
            self.optimal(frames, pages)

    def fifo(self, frames, pages):
        memory = []
        faults = 0
        self.output_text.insert(tk.END, "Step\tMemory\tPage Fault\n")
        for i, page in enumerate(pages):
            fault = False
            if page not in memory:
                fault = True
                faults += 1
                if len(memory) < frames:
                    memory.append(page)
                else:
                    memory.pop(0)
                    memory.append(page)
            self.output_text.insert(tk.END, f"{i+1}\t{memory}\t{'Yes' if fault else 'No'}\n")
        self.output_text.insert(tk.END, f"\nTotal Page Faults: {faults}")

    def lru(self, frames, pages):
        memory = []
        recent = []
        faults = 0
        self.output_text.insert(tk.END, "Step\tMemory\tPage Fault\n")
        for i, page in enumerate(pages):
            fault = False
            if page not in memory:
                fault = True
                faults += 1
                if len(memory) < frames:
                    memory.append(page)
                else:
                    # Remove least recently used
                    lru_page = recent.pop(0)
                    memory.remove(lru_page)
                    memory.append(page)
            else:
                # Page is already in memory, update recent
                recent.remove(page)
            recent.append(page)
            self.output_text.insert(tk.END, f"{i+1}\t{memory}\t{'Yes' if fault else 'No'}\n")
        self.output_text.insert(tk.END, f"\nTotal Page Faults: {faults}")

    def optimal(self, frames, pages):
        memory = []
        faults = 0
        self.output_text.insert(tk.END, "Step\tMemory\tPage Fault\n")
        for i, page in enumerate(pages):
            fault = False
            if page not in memory:
                fault = True
                faults += 1
                if len(memory) < frames:
                    memory.append(page)
                else:
                    # Replace the page that won't be used for the longest time
                    future_use = []
                    for m in memory:
                        if m in pages[i+1:]:
                            future_use.append(pages[i+1:].index(m))
                        else:
                            future_use.append(float('inf'))
                    memory.pop(future_use.index(max(future_use)))
                    memory.append(page)
            self.output_text.insert(tk.END, f"{i+1}\t{memory}\t{'Yes' if fault else 'No'}\n")
        self.output_text.insert(tk.END, f"\nTotal Page Faults: {faults}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PageReplacementVisualizer(root)
    root.mainloop()

